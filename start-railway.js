// Script de inicializa√ß√£o para Railway
console.log('üöÇ Inicializando aplica√ß√£o na Railway...');

// Configurar vari√°veis de ambiente caso n√£o estejam definidas
process.env.NODE_ENV = process.env.NODE_ENV || 'production';
process.env.PORT = process.env.PORT || 3000;

// Configura√ß√µes do banco de dados
const DB_CONFIG = {
  DB_HOST: process.env.DB_HOST || 'mercocamp.ip.odhserver.com',
  DB_PORT: process.env.DB_PORT || 33101,
  DB_USER: process.env.DB_USER || 'projetos',
  DB_PASSWORD: process.env.DB_PASSWORD || 'masterkey',
  DB_CHECKIN: process.env.DB_CHECKIN || 'dbcheckin',
  DB_MERCOCAMP: process.env.DB_MERCOCAMP || 'dbmercocamp',
  DB_USERS: process.env.DB_USERS || 'dbusers'
};

// Mostrar as configura√ß√µes atuais (sem a senha)
console.log('\nüîß Configura√ß√µes carregadas:');
console.log('NODE_ENV:', process.env.NODE_ENV);
console.log('PORT:', process.env.PORT);
console.log('DB_HOST:', DB_CONFIG.DB_HOST);
console.log('DB_PORT:', DB_CONFIG.DB_PORT);
console.log('DB_USER:', DB_CONFIG.DB_USER);
console.log('DB_CHECKIN:', DB_CONFIG.DB_CHECKIN);
console.log('DB_MERCOCAMP:', DB_CONFIG.DB_MERCOCAMP);
console.log('DB_USERS:', DB_CONFIG.DB_USERS);

// Testar conectividade com o banco de dados antes de iniciar
console.log('\nüîç Testando conectividade TCP com o banco de dados...');

const net = require('net');
const socket = new net.Socket();
const connectTimeout = 30000; // 30 segundos

socket.setTimeout(connectTimeout);

socket.on('connect', () => {
  console.log(`‚úÖ Conectividade TCP estabelecida com ${DB_CONFIG.DB_HOST}:${DB_CONFIG.DB_PORT}`);
  socket.destroy();
  startApp();
});

socket.on('timeout', () => {
  console.log(`‚ö†Ô∏è Timeout ao conectar com ${DB_CONFIG.DB_HOST}:${DB_CONFIG.DB_PORT} ap√≥s ${connectTimeout}ms`);
  console.log('‚ö†Ô∏è Poss√≠vel bloqueio de firewall ou IP n√£o permitido');
  console.log('‚ö†Ô∏è Continuando com inicializa√ß√£o da aplica√ß√£o mesmo assim...');
  socket.destroy();
  startApp();
});

socket.on('error', (err) => {
  console.log(`‚ö†Ô∏è Erro ao conectar com ${DB_CONFIG.DB_HOST}:${DB_CONFIG.DB_PORT}: ${err.message}`);
  console.log('‚ö†Ô∏è Verificar configura√ß√µes de rede e firewall');
  console.log('‚ö†Ô∏è Continuando com inicializa√ß√£o da aplica√ß√£o mesmo assim...');
  socket.destroy();
  startApp();
});

// Tentar conex√£o TCP
console.log(`üì° Conectando a ${DB_CONFIG.DB_HOST}:${DB_CONFIG.DB_PORT}...`);
socket.connect(DB_CONFIG.DB_PORT, DB_CONFIG.DB_HOST);

// Fun√ß√£o para iniciar a aplica√ß√£o
function startApp() {
  console.log('\nüöÄ Iniciando aplica√ß√£o...');
  
  try {
    // Carregar e executar o app.js principal
    require('./app.js');
  } catch (error) {
    console.error('‚ùå Erro ao iniciar aplica√ß√£o:', error);
    process.exit(1);
  }
}
