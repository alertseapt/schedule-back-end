const mysql = require('mysql2/promise');

// Configura√ß√µes de banco de dados
const dbConfig = {
  host: process.env.DB_HOST || 'mercocamp.ip.odhserver.com',
  port: process.env.DB_PORT || 33101,
  user: process.env.DB_USER || 'projetos',
  password: process.env.DB_PASSWORD || 'masterkey',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
};

// Pools de conex√£o para cada banco
const checkinPool = mysql.createPool({
  ...dbConfig,
  database: process.env.DB_CHECKIN || 'dbcheckin'
});

const mercocampPool = mysql.createPool({
  ...dbConfig,
  database: process.env.DB_MERCOCAMP || 'dbmercocamp'
});

const usersPool = mysql.createPool({
  ...dbConfig,
  database: process.env.DB_USERS || 'dbusers'
});

/**
 * Executa query no banco dbcheckin
 */
async function executeCheckinQuery(query, params = []) {
  try {
    const [rows] = await checkinPool.execute(query, params);
    return rows;
  } catch (error) {
    console.error('‚ùå Erro na query do dbcheckin:', error);
    throw error;
  }
}

/**
 * Executa query no banco dbmercocamp
 */
async function executeMercocampQuery(query, params = []) {
  try {
    const [rows] = await mercocampPool.execute(query, params);
    return rows;
  } catch (error) {
    console.error('‚ùå Erro na query do dbmercocamp:', error);
    throw error;
  }
}

/**
 * Executa query no banco dbusers
 */
async function executeUsersQuery(query, params = []) {
  try {
    const [rows] = await usersPool.execute(query, params);
    return rows;
  } catch (error) {
    console.error('‚ùå Erro na query do dbusers:', error);
    throw error;
  }
}

/**
 * Testa as conex√µes com todos os bancos
 * 
 * @returns {boolean} - true se todas as conex√µes estiverem funcionando
 */
async function testConnections() {
  try {
    console.log('üîç Testando conex√µes com bancos de dados...');
    
    let allConnectionsHealthy = true;
    
    // Testar dbcheckin
    try {
      await checkinPool.execute('SELECT 1');
      console.log('‚úÖ dbcheckin: Conectado');
    } catch (error) {
      console.log('‚ùå dbcheckin: Erro na conex√£o');
      allConnectionsHealthy = false;
    }
    
    // Testar dbmercocamp
    try {
      await mercocampPool.execute('SELECT 1');
      console.log('‚úÖ dbmercocamp: Conectado');
    } catch (error) {
      console.log('‚ùå dbmercocamp: Erro na conex√£o');
      allConnectionsHealthy = false;
    }
    
    // Testar dbusers
    try {
      await usersPool.execute('SELECT 1');
      console.log('‚úÖ dbusers: Conectado');
    } catch (error) {
      console.log('‚ùå dbusers: Erro na conex√£o');
      allConnectionsHealthy = false;
    }
    
    console.log('üîç Teste de conex√µes conclu√≠do');
    
    if (allConnectionsHealthy) {
      console.log('‚úÖ Todas as conex√µes est√£o funcionando');
      return true;
    } else {
      console.log('‚ö†Ô∏è Algumas conex√µes falharam');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao testar conex√µes:', error);
    return false;
  }
}

/**
 * Fecha todas as conex√µes
 */
async function closeConnections() {
  try {
    await checkinPool.end();
    await mercocampPool.end();
    await usersPool.end();
    console.log('‚úÖ Conex√µes fechadas');
  } catch (error) {
    console.error('‚ùå Erro ao fechar conex√µes:', error);
  }
}

module.exports = {
  executeCheckinQuery,
  executeMercocampQuery,
  executeUsersQuery,
  testConnections,
  closeConnections,
  checkinPool,
  mercocampPool,
  usersPool
};
